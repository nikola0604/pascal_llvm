%{
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <map>
#include "ast.hpp"
#include <vector>

#define YYDEBUG 1

using namespace std;

void yyerror(string s)
{
   cerr << s << endl;
   exit(EXIT_FAILURE);
}

extern int yylex();

int counter=0;
Function *mainFja;
Function *PrintfFja;
Value *Str;
ExprAST *mm;

%}

%union
{
  string *s;
  double x;
  ExprAST *e;
  vector<ExprAST*> *v;
  vector<string> *v1;
  vector<pair<string, ExprAST*> > *v2;
  pair<string, ExprAST*> *pa;
  PrototypeAST *po;
}

%token begin_token end_token write_token mod_token
%token if_token then_token else_token read_token
%token while_token do_token var_token function_token end_if_token

%token <s> string_token id_token
%token <x> num_token

%type <e> E Statement Block Program DeclarationBlock
%type <v> StatementArray EArray Arguments
%type <v2> VarDeclArray
%type <pa> VarDecl
%type <po> Proto;
%type <v1> Args;

%nonassoc else_token
%left ':'
%left '<' '>'
%left '+' '-'
%left '*' '/' mod_token

%%

// Posebne varijante u slucaju da ne postoje definicije f-ja pre "main" i ako ih ima
// Cvorovi se rekurzivno codegen-uju u main-u. Razlog tome je pojavljivanje ugnjezdenih blokova i ovo resenje mi se cinilo kao najbolje
// Postoje pametnija resenja kad je gramatika u pitanju ali sam hteo da zadrzim onu gramatiku koju sam branio usmeno.
// Tako da mislim da funkcionalnost vec postojece gramatike nije mogla da se prosiri mnogo efikasnije.
Program: Block '.'
         {
           mm = $1;
         }
       | FunctionDefArray Block '.'
         {
           mm = $2;
         }
       ;

// Uzevsi u obzir da se definicije funkcija codegen-uju pri redukciji ovo pravilo sam ostavio ovakvo samo zbog intuitivnosti i kozmetike
FunctionDefArray: FunctionDefArray FunctionDef
                  {}
                | FunctionDef
                  {}
                ;

// Codegen funkcija
FunctionDef: function_token Proto begin_token StatementArray end_token
             {
               FunctionAST *f = new FunctionAST(*$2, new Block(*$4));
               delete $2;
               delete $4;

               f->codegen();
             }
          ;

// Dve varijante blokova, ona kojoj ne prethodni deklarativna sekcija i ona kojoj prethodi
Block: begin_token StatementArray end_token
       {
         $$ = new Block(*$2);
         delete $2;
       }
    |  DeclarationBlock
       {
         vector<ExprAST*> *localVars = new vector<ExprAST*>();
         localVars->push_back($1);
         $$ = new Block(*localVars);
       }
    ;

// Varijanta bloka kojoj prethode deklaracije promenljivih
DeclarationBlock: var_token VarDeclArray Block
                   {
                     $$ = new VarExprAST(*$2, $3);
                     delete $2;
                   }
                ;

VarDeclArray: VarDeclArray ',' VarDecl
              {
                $$ = $1;
                $$->push_back(*$3);
                delete $3;
              }
            | VarDecl
              {
                $$ = new vector< pair<string, ExprAST*> >();
                $$->push_back(*$1);
                delete $1;
              }
            ;

VarDecl: id_token
         {
           $$ = new pair<string, ExprAST*>(*$1, NULL);
               delete $1;
             }
           ;

//Logika ostatka gramatike je preuzeta sa vezbi
//Dangling else sam resio dodavanjem end_if tokena kojim se zatvara naredba grananja
StatementArray: StatementArray Statement
                {
                  $$ = $1;
                  $$->push_back($2);
                }
              | Statement
                {
                  $$ = new vector<ExprAST*>();
                  $$->push_back($1);
                }
              ;

Statement: write_token '(' E ')'
           {
             $$ = new WriteStatement($3);
           }
         | id_token ':' '=' E
           {
             $$ = new AssignExprAST(*$1, $4);
             delete $1;
           }
         | if_token E then_token Statement end_if_token
           {
             $$ = new IfThenExprAST($2, $4);
           }
         | if_token E then_token Statement else_token Statement end_if_token
           {
             $$ = new IfExprAST($2, $4, $6);
           }
         | while_token E do_token Statement
           {
             $$ = new WhileExprAST($2, $4);
           }
         | id_token '(' Arguments ')'
           {
             $$ = new CallExprAST(*$1, *$3);
             delete $1;
             delete $3;
           }
         | Block { $$ = $1; }
         ;

Arguments: EArray
           {
             $$ = $1;
           }
         | {
             $$ = new vector<ExprAST*>();
           }
         ;

EArray: EArray ',' E
        {
          $$ = $1;
          $$->push_back($3);
        }
      | E
        {
          $$ = new vector<ExprAST*>();
          $$->push_back($1);
        }
      ;

Proto: id_token '(' Args ')'
       {
         $$ = new PrototypeAST(*$1, *$3);
         delete $1;
         delete $3;
       }
     ;

 Args: Args ',' id_token
       {
         $$ = $1;
         $$->push_back(*$3);
         delete $3;
       }
     | id_token
       {
         $$ = new vector<string>();
         $$->push_back(*$1);
         delete $1;
       }
     ;

E: E '+' E    { $$ = new AddExprAST($1, $3); }
 | E '-' E    { $$ = new SubExprAST($1, $3); }
 | E '*' E    { $$ = new MulExprAST($1, $3); }
 | E '/' E    { $$ = new DivExprAST($1, $3); }
 | E '<' E    { $$ = new LTExprAST($1, $3); }
 | E '>' E    { $$ = new GTExprAST($1, $3); }
 | '(' E ')'  { $$ = $2;}
 | num_token  { $$ = new NumberExprAST($1); }
 | id_token
   {
     $$ = new VariableExprAST(*$1);
     delete $1;
   }
 ;

%%

extern Module *theModule;
extern IRBuilder<> builder;
extern LLVMContext theContext;

int main(int argc, char **argv)
{
  yydebug = 1;

  InitializeModuleAndPassManager();

  // Main f-ja
  vector<Type*> v(0);
  FunctionType* FT2 = FunctionType::get(Type::getInt32Ty(theContext), v, false);
  mainFja = Function::Create(FT2, Function::ExternalLinkage, "main", theModule);
  BasicBlock *BB = BasicBlock::Create(theContext, "mainEntry", mainFja);

  // Print f-ja
  FunctionType *FT1 = FunctionType::get(IntegerType::getInt32Ty(theContext), PointerType::get(Type::getInt8Ty(theContext), 0), true);
  PrintfFja = Function::Create(FT1, Function::ExternalLinkage, "printf", theModule);

  builder.SetInsertPoint(BB);
  Str = builder.CreateGlobalStringPtr("[%g]\n");

  yyparse();

  // Pri definiciji funkcija insert point ostane u bloku poslednje definisane f-je (jer se f-je codegen-uju isprepletano sa parsiranjem)
  // Tako da ga resetujem na kraj Main f-je
  builder.SetInsertPoint(BB);

  // codegen
  mm->codegen();

  // Zatvaramo main
  builder.CreateRet(ConstantInt::get(theContext, APInt(32, 0)));
  verifyFunction(*mainFja);

  theModule->dump();

  string TargetTriple = "x86_64-pc-linux-gnu";
  LLVMInitializeAllTargetInfos();
  LLVMInitializeAllTargets();
  LLVMInitializeAllTargetMCs();
  LLVMInitializeAllAsmParsers();
  LLVMInitializeAllAsmPrinters();

  string Error;
  auto Target = TargetRegistry::lookupTarget(TargetTriple, Error);
  if (!Target)
  {
    cerr << Error;
    return 1;
  }

  auto CPU = "generic";
  auto Features = "";

  TargetOptions opt;
  auto RM = Reloc::Model();
  auto TargetMachine = Target->createTargetMachine(TargetTriple, CPU, Features, opt, RM);

  theModule->setDataLayout(TargetMachine->createDataLayout());
  theModule->setTargetTriple(TargetTriple);
  string Filename = "output.o";

  error_code EC;
  raw_fd_ostream dest(Filename, EC, sys::fs::F_None);
  if (EC)
  {
    cerr << "Could not open file: " << EC.message();
    return 1;
  }

  legacy::PassManager pass;

  auto FileType = TargetMachine::CGFT_ObjectFile;
  if (TargetMachine->addPassesToEmitFile(pass, dest, FileType))
  {
    cerr << "TargetMachine can't emit a file of this type";
    return 1;
  }

  pass.run(*theModule);
  dest.flush();

  delete theModule;
  return EXIT_SUCCESS;
}
